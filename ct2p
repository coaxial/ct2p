#!/usr/bin/env bash
set -euo pipefail

PIDFILE=/var/run/ct2p.pid
INCOMING_DIR=/ct2p/dropbox
OUTPUT_DIR=/ct2p/processed
TMP_DIR_BASE="/tmp"

create_pidfile() {
  echo $$ > "$PIDFILE"
}

watch_for_change() {
  inotifywait --monitor --event create --format %w%f "$INCOMING_DIR"
}

create_tmp_dir() {
  mkdir -p "$TMP_DIR_BASE/$uuid/pages"
  mkdir -p "$TMP_DIR_BASE/$uuid/pdf"
}

clean_text() {
  TMP_DIR="$TMP_DIR_BASE/$uuid"
  parallel textcleaner "{}" "$TMP_DIR/pages/clean_{/}" ::: "$TMP_DIR/pages/"*.tif
}

combine() {
  outfile="$(date "+%Y%m%d_%H%M%S").pdf"
  TMP_DIR="$TMP_DIR_BASE/$uuid"
  convert "$TMP_DIR/pages"/clean_*.tif "$TMP_DIR/pdf/$outfile"
  chmod 666 "$TMP_DIR/pdf/$outfile"
  mv "$TMP_DIR/pdf/$outfile" "$OUTPUT_DIR/$outfile"
}

cleanup() {
  # The Steam lesson (https://github.com/koalaman/shellcheck/wiki/SC2115)
  rm -rf "${TMP_DIR_BASE:?}/$uuid"
}

extract_files() {
  echo "UUID: $uuid"
  tar -xzf "$1" --directory="$TMP_DIR_BASE/$uuid/pages"
  rm "$1"
}

process_file() {
  # -r to avoid mangling \, cf
  # https://github.com/koalaman/shellcheck/wiki/SC2162
  while read -r file; do
    if [[ "$file" =~ tar\.gz$ ]]; then
      export uuid
      uuid=$(uuidgen)
      create_tmp_dir
      extract_files "$file"
      clean_text
      combine
      cleanup
      unset uuid
    fi
  done
}

create_pidfile
watch_for_change | process_file
# Ensure pidfile is deleted if script crashes. It's fine if $PIDFILE is
# expanded now rather than at when signalled.
# shellcheck disable=SC2064
trap "rm -f -- '$PIDFILE'" EXIT
